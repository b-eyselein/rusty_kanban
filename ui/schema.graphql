type Board {
  id: Int!
  slots: [Slot!]!
  title: String!
}

type BoardMutations {
  createSlot(title: String!): Int!
  rename(newTitle: String!): String!
}

type Card {
  id: Int!
  tasks: [Task!]!
  title: String!
}

type CardMutations {
  createTask(title: String!): Int!
  moveSlot(newSlotId: Int!): Int!
  rename(newTitle: String!): String!
}

type Mutation {
  boardMutations(id: Int!): BoardMutations
  cardMutations(id: Int!): CardMutations
  createProject(title: String!): Int!
  projectMutations(id: Int!): ProjectMutations
  slotMutations(id: Int!): SlotMutations
  taskMutations(id: Int!): TaskMutations
}

type Project {
  boards: [Board!]!
  id: Int!
  title: String!
}

type ProjectMutations {
  createBoard(title: String!): Int!
  rename(newTitle: String!): String!
}

type Query {
  projectById(id: Int!): Project
  projects: [Project!]!
}

type Slot {
  cards: [Card!]!
  id: Int!
  title: String!
}

type SlotMutations {
  createCard(title: String!): Int!
  rename(newTitle: String!): String!
}

type Task {
  finished: Boolean!
  id: Int!
  title: String!
}

type TaskMutations {
  finish: Boolean!
  update(newTitle: String!): String!
}